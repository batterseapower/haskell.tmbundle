<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>hs</string>
	</array>
	<key>keyEquivalent</key>
	<string>^~H</string>
	<key>name</key>
	<string>Haskell</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#toplevel</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#base</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>base</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#reserved</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#support</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#fallback</string>
				</dict>
			</array>
		</dict>
		<key>char</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.haskell</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.haskell</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.haskell</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(')(?:(\\.)|[^'\\])(')</string>
			<key>name</key>
			<string>string.quoted.single.haskell</string>
		</dict>
		<key>class</key>
		<dict>
			<key>begin</key>
			<string>^(\s*)(class)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.def.class.haskell</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^(?:$|(?!\1\s+))</string>
			<key>name</key>
			<string>meta.class.haskell</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#base</string>
				</dict>
			</array>
		</dict>
		<key>collection</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\(\)</string>
					<key>name</key>
					<string>constant.language.unit.haskell</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.tuple.begin.haskell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.tuple.end.haskell</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.tuple.haskell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.tuple.haskell</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#base</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>\[\]</string>
					<key>name</key>
					<string>constant.language.nil.haskell</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\[</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.array.begin.haskell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\]</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.array.end.haskell</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.array.haskell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.array.haskell</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#base</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.structure.begin.haskell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.structure.end.haskell</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.structure.haskell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.structure.haskell</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#base</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>comment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.haskell</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^\s*(#!).*$\n?</string>
					<key>name</key>
					<string>comment.line.number-sign.shebang.haskell</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.preprocessor.c</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^\s*(#).*$\n?</string>
					<key>name</key>
					<string>meta.preprocessor.c</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\{-#</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.preprocessor.haskell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>#-\}</string>
					<key>name</key>
					<string>meta.preprocessor.pragma.haskell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\b(LANGUAGE|UNPACK|INLINE)\b</string>
							<key>name</key>
							<string>keyword.other.preprocessor.pragma.haskell</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\{-\s*\|</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.documentation.haskell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>-\}</string>
					<key>name</key>
					<string>comment.block.documentation.haddock.haskell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment-contents</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\{-</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.haskell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>-\}</string>
					<key>name</key>
					<string>comment.block.haskell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment-contents</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^(\s*)(-{2})\s?(\|)</string>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.haskell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.documentation.haskell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>^(?:$|(?!\1\2))</string>
					<key>name</key>
					<string>comment.block.documentation.pseudo.prefix.haddock.haskell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>^(\s*)(-{2})</string>
							<key>name</key>
							<string>punctuation.definition.comment.haskell</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^(\s*)(-{2})\s?(\^)</string>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.haskell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.documentation.haskell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>^(?:$|(?!\1\2))</string>
					<key>name</key>
					<string>comment.block.documentation.pseudo.postfix.haddock.haskell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>^(\s*)(-{2})</string>
							<key>name</key>
							<string>punctuation.definition.comment.haskell</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>-{2}\s?\|</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.documentation.haskell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>comment.line.documentation.prefix.haddock.haskell</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>-{2}\s?\^</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.documentation.haskell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>comment.line.documentation.postfix.haddock.haskell</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.haskell</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(-{2}).*$\n?</string>
					<key>name</key>
					<string>comment.line.double-dash.haskell</string>
				</dict>
			</array>
		</dict>
		<key>comment-contents</key>
		<dict>
			<key>begin</key>
			<string>\{-</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.haskell</string>
				</dict>
			</dict>
			<key>end</key>
			<string>-\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment-contents</string>
				</dict>
			</array>
		</dict>
		<key>fallback</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.other.module.haskell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.haskell</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Not sure whether I want these yet.</string>
					<key>disabled</key>
					<integer>1</integer>
					<key>match</key>
					<string>(\b[A-Z](?:\.[A-Z]|[A-Za-z_0-9'])*\.)?([!#\$%&amp;\*\+\./&lt;=&gt;;?\@\\\^\|\-~][!#\$%&amp;\*\+\./&lt;=&gt;?\@\\\^\|\-~:]*)</string>
					<key>name</key>
					<string></string>
				</dict>
				<dict>
					<key>match</key>
					<string>([!#\$%&amp;\*\+\./&lt;=&gt;?\@\\\^\|\-~][!#\$%&amp;\*\+\./&lt;=&gt;?\@\\\^\|\-~:]*)</string>
					<key>name</key>
					<string>keyword.operator.haskell</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.keyword.haskell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.other.module.haskell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.function.haskell</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.keyword.haskell</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Not sure whether I want these yet.</string>
					<key>disabled</key>
					<integer>1</integer>
					<key>match</key>
					<string>(`)(\b[A-Z](?:\.[A-Z]|[A-Za-z_0-9'])*\.)?([a-z_][A-Za-z_0-9']*)(`)</string>
					<key>name</key>
					<string>keyword.operator.function.haskell</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.keyword.haskell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.haskell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.keyword.haskell</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(`)([a-z_][A-Za-z_0-9']*)(`)</string>
					<key>name</key>
					<string>keyword.operator.function.haskell</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.other.module.haskell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.haskell</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Not sure whether I want these yet.</string>
					<key>disabled</key>
					<integer>1</integer>
					<key>match</key>
					<string>\b([A-Z](?:\.[A-Z]|[A-Za-z_0-9'])*\.)?([a-z_][A-Za-z_0-9']*)\b</string>
					<key>name</key>
					<string></string>
				</dict>
				<dict>
					<key>comment</key>
					<string>TODO: Find a better scope than support.function for arbitrary function names.</string>
					<key>disabled</key>
					<integer>1</integer>
					<key>match</key>
					<string>\b([a-z_][A-Za-z_0-9']*)</string>
					<key>name</key>
					<string>support.function.haskell</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.other.module.haskell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.type.haskell</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Not sure whether I want these yet.</string>
					<key>disabled</key>
					<integer>1</integer>
					<key>match</key>
					<string>\b([A-Z](?:\.[A-Z]|[A-Za-z_0-9'])*\.)?([A-Z][A-Za-z_0-9']*)\b</string>
					<key>name</key>
					<string></string>
				</dict>
				<dict>
					<key>comment</key>
					<string>TODO: Find a better scope than support.type for arbitrary types, ctors etc.</string>
					<key>disabled</key>
					<integer>1</integer>
					<key>match</key>
					<string>\b([A-Z][A-Za-z_0-9']*)</string>
					<key>name</key>
					<string>support.type.haskell</string>
				</dict>
			</array>
		</dict>
		<key>function</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^(\s*)([a-z_][A-Za-z_0-9']*)(?:\s*(,)\s*([a-z_][A-Za-z_0-9']*))*\s+(::)</string>
					<key>beginCaptures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.haskell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.function.haskell</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.haskell</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.function.type.haskell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>^(?:$|(?!\1\s+))</string>
					<key>name</key>
					<string>meta.function.type.haskell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#base</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^(\s*)([a-z_][A-Za-z_0-9']*)\s+((?:(?!=|\||$).)*)(?==|\|)</string>
					<key>beginCaptures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.haskell</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>TODO: $3 contains Patterns, i.e. variables, values and types.</string>
					<key>end</key>
					<string>^(?:$|(?!\1\s+))</string>
					<key>name</key>
					<string>meta.function.body.haskell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#base</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^(\s*)\(([!#\$%&amp;\*\+\./&lt;=&gt;?\@\\\^\|\-~][!#\$%&amp;\*\+\./&lt;=&gt;?\@\\\^\|\-~:]*)\)(?:\s*(,)\s*\(([!#\$%&amp;\*\+\./&lt;=&gt;?\@\\\^\|\-~][!#\$%&amp;\*\+\./&lt;=&gt;?\@\\\^\|\-~:]*)\))*\s+(::)</string>
					<key>beginCaptures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.operator.haskell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.function.haskell</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.operator.haskell</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.function.type.haskell</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>I won't even pretend to be able to parse mixfix declarations.</string>
					<key>end</key>
					<string>^(?:$|(?!\1\s+))</string>
					<key>name</key>
					<string>meta.function.type.operator.haskell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#base</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^(\s*)\(([!#\$%&amp;\*\+\./&lt;=&gt;?\@\\\^\|\-~][!#\$%&amp;\*\+\./&lt;=&gt;?\@\\\^\|\-~:]*)\)\s+((?:(?!=|\||$).)*)(?==|\|)</string>
					<key>beginCaptures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.operator.haskell</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>TODO: $3 contains Patterns, i.e. variables, values and types.</string>
					<key>end</key>
					<string>^(?:$|(?!\1\s+))</string>
					<key>name</key>
					<string>meta.function.body.operator.haskell</string>
				</dict>
			</array>
		</dict>
		<key>import</key>
		<dict>
			<key>begin</key>
			<string>^(\s*)(import)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.haskell</string>
				</dict>
			</dict>
			<key>end</key>
			<string>($|;)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.terminator.haskell</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.import.haskell</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(qualified|as|hiding)\b</string>
					<key>name</key>
					<string>keyword.control.import.haskell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#base</string>
				</dict>
			</array>
		</dict>
		<key>instance</key>
		<dict>
			<key>begin</key>
			<string>^(\s*)(instance)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.def.instance.haskell</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^(?:$|(?!\1\s+))</string>
			<key>name</key>
			<string>meta.instance.haskell</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#base</string>
				</dict>
			</array>
		</dict>
		<key>literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#number</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#collection</string>
				</dict>
			</array>
		</dict>
		<key>module</key>
		<dict>
			<key>begin</key>
			<string>^\s*(module)\s+([A-Z][A-Za-z_0-9'\.]*)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.def.module.haskell</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.section.module.haskell</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Never ends; the rest of the file belongs to this module.
			Corresponding end matcher could be something like: ^(?&lt;!^)
			We will pretend to end when we declare another module though.</string>
			<key>end</key>
			<string>^(?=\s*module\b)</string>
			<key>name</key>
			<string>meta.module.haskell</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#toplevel</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#base</string>
				</dict>
			</array>
		</dict>
		<key>number</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b0[Xx][0-9A-Fa-f]+</string>
					<key>name</key>
					<string>constant.numeric.integer.hexadecimal.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b0[Oo][0-7]+</string>
					<key>name</key>
					<string>constant.numeric.integer.octal.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b[0-9]+\.[0-9]+([Ee][\-\+]?[0-9]+)?</string>
					<key>name</key>
					<string>constant.numeric.float.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b[0-9]+([eE][\-\+]?[0-9]+)</string>
					<key>name</key>
					<string>constant.numeric.float.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b[0-9]+</string>
					<key>name</key>
					<string>constant.numeric.integer.decimal.haskell</string>
				</dict>
			</array>
		</dict>
		<key>reserved</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(let|in|if|then|else|case|of|do|where)\b</string>
					<key>name</key>
					<string>keyword.control.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(type|data|deriving|newtype|class|instance|default|module|import)\b</string>
					<key>name</key>
					<string>keyword.control.def.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(infix[lr]?)\b</string>
					<key>name</key>
					<string>keyword.other.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(otherwise)\b</string>
					<key>name</key>
					<string>keyword.control.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>,|\.\.|:{1,2}|=|\\|&lt;[-=]|[-=]&gt;|@|~|\|</string>
					<key>name</key>
					<string>keyword.operator.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>_</string>
					<key>name</key>
					<string>variable.language.universal.haskell</string>
				</dict>
			</array>
		</dict>
		<key>string</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.haskell</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.character.escape.haskell</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.haskell</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(")(?:(\\.)|[^"\\])*(")</string>
			<key>name</key>
			<string>string.quoted.double.haskell</string>
		</dict>
		<key>support</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(Monad|Functor|Eq|Ord|Read|Show|Num|(Frac|Ra)tional|Enum|Bounded|Real(Frac|Float)?|Integral|Floating)\b</string>
					<key>name</key>
					<string>support.class.prelude.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(Just|Nothing|Left|Right|True|False|LT|EQ|GT)\b</string>
					<key>name</key>
					<string>support.constant.prelude.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(abs|acos|acosh|all|and|any|appendFile|applyM|asTypeOf|asin|asinh|atan|atan2|atanh|break|catch|ceiling|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|div|divMod|drop|dropWhile|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromEnum|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|head|id|init|interact|ioError|isDenormalized|isIEEE|isInfinite|isNaN|isNegativeZero|iterate|last|lcm|length|lex|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|odd|or|otherwise|pi|pred|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|read|readFile|readIO|readList|readLn|readParen|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showList|showParen|showString|shows|showsPrec|significand|signum|sin|sinh|snd|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|toEnum|toInteger|toRational|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\b</string>
					<key>name</key>
					<string>support.function.prelude.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(Int(eger)?|Maybe|Either|Bool|Float|Double|Char|String|Ordering|ShowS|ReadS|FilePath|IO(Error)?)\b</string>
					<key>name</key>
					<string>support.type.prelude.haskell</string>
				</dict>
			</array>
		</dict>
		<key>toplevel</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#import</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#instance</string>
				</dict>
			</array>
		</dict>
		<key>type</key>
		<dict>
			<key>begin</key>
			<string>^(\s*)(type|newtype|data)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.def.type.haskell</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^(?:$|(?!\1\s+))</string>
			<key>name</key>
			<string>meta.type.haskell</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#base</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.haskell</string>
	<key>uuid</key>
	<string>5C034675-1F6D-497E-8073-369D37E2FD7D</string>
</dict>
</plist>
