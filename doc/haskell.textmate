{	scopeName = 'source.haskell';
	fileTypes = ( 'hs' );
	patterns = (
		{	name = 'keyword.operator.function.infix.haskell';
			comment = 'In case this regex seems unusual for an infix operator, note that Haskell allows any ordinary function application (elem 4 [1..10]) to be rewritten as an infix expression (4 `elem` [1..10]).';
			match = "(`)[a-zA-Z_']*?(`)";
			captures = {
				1 = { name = 'punctuation.definition.entity.haskell'; };
				2 = { name = 'punctuation.definition.entity.haskell'; };
			};
		},
		{	name = 'constant.language.unit.haskell';
			match = '\(\)';
		},
		{	name = 'constant.language.empty-list.haskell';
			match = '\[\]';
		},
		{	name = 'meta.declaration.module.haskell';
			begin = '(module)';
			end = '(where)';
			beginCaptures = { 1 = { name = 'keyword.other.haskell'; }; };
			endCaptures = { 1 = { name = 'keyword.other.haskell'; }; };
			patterns = (
				{	include = '#module_name'; },
				{	include = '#module_exports'; },
				{	name = 'invalid';
					match = '[a-z]+';
				},
			);
		},
		{	name = 'meta.declaration.class.haskell';
			begin = '\b(class)\b';
			end = '\b(where)\b';
			beginCaptures = { 1 = { name = 'keyword.other.haskell'; }; };
			endCaptures = { 1 = { name = 'keyword.other.haskell'; }; };
			patterns = (
				{	name = 'support.class.prelude.haskell';
					match = '\b(Monad|Functor|Eq|Ord|Read|Show|Num|(Frac|Ra)tional|Enum|Bounded|Real(Frac|Float)?|Integral|Floating)\b';
				},
				{	name = 'entity.other.inherited-class.haskell';
					match = "[A-Z][A-Za-z_']*";
				},
				{	name = 'variable.other.generic-type.haskell';
					match = "\b[a-z][a-zA-Z0-9_']*\b";
				},
			);
		},
		{	name = 'meta.declaration.instance.haskell';
			begin = '\b(instance)\b';
			end = '\b(where)\b|$';
			beginCaptures = { 1 = { name = 'keyword.other.haskell'; }; };
			endCaptures = { 1 = { name = 'keyword.other.haskell'; }; };
			patterns = ( { include = '#type_signature'; } );
		},
		{	name = 'meta.import.haskell';
			begin = '(import)';
			end = '($|;)';
			beginCaptures = { 1 = { name = 'keyword.other.haskell'; }; };
			patterns = (
				{	name = 'keyword.other.haskell';
					match = '(qualified|as|hiding)';
				},
				{	include = '#module_name'; },
				{	include = '#module_exports'; },
			);
		},
		{	name = 'meta.deriving.haskell';
			begin = '(deriving)\s*\(';
			end = '\)';
			beginCaptures = { 1 = { name = 'keyword.other.haskell'; }; };
			patterns = (
				{	name = 'entity.other.inherited-class.haskell';
					match = "\b[A-Z][a-zA-Z_']*";
				},
			);
		},
		{	name = 'keyword.other.haskell';
			match = '\b(deriving|where|data|type|case|of|let|in|newtype|default)\b';
		},
		{	name = 'keyword.operator.haskell';
			match = '\binfix[lr]?\b';
		},
		{	name = 'keyword.control.haskell';
			match = '\b(do|if|then|else)\b';
		},
		{	name = 'constant.numeric.float.haskell';
			comment = 'Floats are always decimal';
			match = '\b([0-9]+\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\b';
		},
		{	name = 'constant.numeric.haskell';
			match = '\b([0-9]+|0([xX][0-9a-fA-F]+|[oO][0-7]+))\b';
		},
		{	name = 'meta.preprocessor.c';
			comment = 'In addition to Haskell''s "native" syntax, GHC permits the C preprocessor to be run on a source file.';
			match = '^\s*(#)\s*\w+';
			captures = { 1 = { name = 'punctuation.definition.preprocessor.c'; }; };
		},
		{	include = '#pragma'; },
		{	name = 'string.quoted.double.haskell';
			begin = '"';
			end = '"';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.haskell'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.haskell'; }; };
			patterns = (
				{	name = 'constant.character.escape.haskell';
					match = '\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\"''\&])';
				},
				{	name = 'constant.character.escape.octal.haskell';
					match = '\\o[0-7]+|\\x[0-9A-Fa-f]+|\\[0-9]+';
				},
				{	name = 'constant.character.escape.control.haskell';
					match = '\^[A-Z@\[\]\\\^_]';
				},
			);
		},
		{	name = 'string.quoted.single.haskell';
			match = '(?x)
			('')
			(?:
				[\ -\[\]-~]								# Basic Char
			  | (\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE
					|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS
					|US|SP|DEL|[abfnrtv\\\"''\&]))		# Escapes
			  | (\\o[0-7]+)								# Octal Escapes
			  | (\\x[0-9A-Fa-f]+)						# Hexadecimal Escapes
			  | (\^[A-Z@\[\]\\\^_])						# Control Chars
			)
			('')
			';
			captures = {
				1 = { name = 'punctuation.definition.string.begin.haskell'; };
				2 = { name = 'constant.character.escape.haskell'; };
				3 = { name = 'constant.character.escape.octal.haskell'; };
				4 = { name = 'constant.character.escape.hexadecimal.haskell'; };
				5 = { name = 'constant.character.escape.control.haskell'; };
				6 = { name = 'punctuation.definition.string.end.haskell'; };
			};
		},
		{	name = 'meta.function.type-declaration.haskell';
			begin = "^\s*([a-z_][a-zA-Z0-9_']*|\([|!%$+\-.,=</>]+\))\s*(::)";
			end = '$\n?';
			beginCaptures = {
				1 = { name = 'entity.name.function.haskell'; };
				2 = { name = 'keyword.other.double-colon.haskell'; };
			};
			patterns = ( { include = '#type_signature'; } );
		},
		{	name = 'support.constant.haskell';
			match = '\b(Just|Nothing|Left|Right|True|False|LT|EQ|GT|\(\)|\[\])\b';
		},
		{	name = 'constant.other.haskell';
			match = '\b[A-Z]\w*\b';
		},
		{	include = '#comments'; },
		{	name = 'support.function.prelude.haskell';
			match = '\b(abs|acos|acosh|all|and|any|appendFile|applyM|asTypeOf|asin|asinh|atan|atan2|atanh|break|catch|ceiling|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|div|divMod|drop|dropWhile|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromEnum|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|head|id|init|interact|ioError|isDenormalized|isIEEE|isInfinite|isNaN|isNegativeZero|iterate|last|lcm|length|lex|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|odd|or|otherwise|pi|pred|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|read|readFile|readIO|readList|readLn|readParen|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showList|showParen|showString|shows|showsPrec|significand|signum|sin|sinh|snd|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|toEnum|toInteger|toRational|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\b';
		},
		{	include = '#infix_op'; },
		{	name = 'keyword.operator.haskell';
			comment = 'In case this regex seems overly general, note that Haskell permits the definition of new operators which can be nearly any string of punctuation characters, such as $%^&*.';
			match = '[|!%$?~+:\-.=</>\\]+';
		},
		{	name = 'punctuation.separator.comma.haskell';
			match = ',';
		},
	);
	repository = {
		block_comment = {
			name = 'comment.block.haskell';
			begin = '\{-(?!#)';
			end = '-\}';
			captures = { 0 = { name = 'punctuation.definition.comment.haskell'; }; };
			patterns = ( { include = '#block_comment'; } );
			applyEndPatternLast = 1;
		};
		comments = {
			patterns = (
				{	name = 'comment.line.double-dash.haskell';
					match = '(--).*$\n?';
					captures = { 1 = { name = 'punctuation.definition.comment.haskell'; }; };
				},
				{	include = '#block_comment'; },
			);
		};
		infix_op = {
			name = 'entity.name.function.infix.haskell';
			match = '(\([|!%$+:\-.=</>]+\)|\(,+\))';
		};
		module_exports = {
			name = 'meta.declaration.exports.haskell';
			begin = '\(';
			end = '\)';
			patterns = (
				{	name = 'entity.name.function.haskell';
					match = "\b[a-z][a-zA-Z_']*";
				},
				{	name = 'storage.type.haskell';
					match = "\b[A-Z][A-Za-z_']*";
				},
				{	name = 'punctuation.separator.comma.haskell';
					match = ',';
				},
				{	include = '#infix_op'; },
				{	name = 'meta.other.unknown.haskell';
					comment = "So named because I don't know what to call this.";
					match = '\(.*?\)';
				},
			);
		};
		module_name = {
			name = 'support.other.module.haskell';
			match = "[A-Z][A-Za-z._']*";
		};
		pragma = {
			name = 'meta.preprocessor.haskell';
			begin = '\{-#';
			end = '#-\}';
			patterns = (
				{	name = 'keyword.other.preprocessor.haskell';
					match = '\b(LANGUAGE|UNPACK|INLINE)\b';
				},
			);
		};
		type_signature = {
			patterns = (
				{	name = 'meta.class-constraint.haskell';
					match = "\(\s*([A-Z][A-Za-z]*)\s+([a-z][A-Za-z_']*)\)\s*(=>)";
					captures = {
						1 = { name = 'entity.other.inherited-class.haskell'; };
						2 = { name = 'variable.other.generic-type.haskell'; };
						3 = { name = 'keyword.other.big-arrow.haskell'; };
					};
				},
				{	include = '#pragma'; },
				{	name = 'keyword.other.arrow.haskell';
					match = '->';
				},
				{	name = 'keyword.other.big-arrow.haskell';
					match = '=>';
				},
				{	name = 'support.type.prelude.haskell';
					match = '\b(Int(eger)?|Maybe|Either|Bool|Float|Double|Char|String|Ordering|ShowS|ReadS|FilePath|IO(Error)?)\b';
				},
				{	name = 'variable.other.generic-type.haskell';
					match = "\b[a-z][a-zA-Z0-9_']*\b";
				},
				{	name = 'storage.type.haskell';
					match = "\b[A-Z][a-zA-Z0-9_']*\b";
				},
				{	name = 'support.constant.unit.haskell';
					match = '\(\)';
				},
				{	include = '#comments'; },
			);
		};
	};
}